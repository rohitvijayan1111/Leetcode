#User function Template for python3

class Solution:
    def minTime(self, root,target):
        # code here
        parents={root:None}
        def findparent(node):
            if(not node):
                return
            if(node.left):
                parents[node.left]=node
                findparent(node.left)
            if(node.right):
                parents[node.right]=node
                findparent(node.right)
            return
        findparent(root)
        target_node = None
        def find_target(node):
            nonlocal target_node
            if not node:
                return
            if node.data == target:
                target_node = node
            find_target(node.left)
            find_target(node.right)
        find_target(root)
        c=0
        visited = {target_node}
        queue=[target_node]
        while(queue):
            n=len(queue)
            for i in range(n):
                element=queue.pop(0)
                visited.add(element)
                if(element.left and element.left not in visited):
                    queue.append(element.left)
                if(element.right and element.right not in visited):
                    queue.append(element.right)
                if(parents[element] and parents[element] not in visited):
                    queue.append(parents[element])
                
            c+=1
        return c-1
        


#{ 
 # Driver Code Starts
#Initial Template for Python 3

from collections import deque

# Tree Node
class Node:
    def __init__(self, val):
        self.right = None
        self.data = val
        self.left = None

# Function to Build Tree   
def buildTree(s):
    #Corner Case
    if(len(s)==0 or s[0]=="N"):           
        return None
        
    # Creating list of strings from input 
    # string after spliting by space
    ip=list(map(str,s.split()))
    
    # Create the root of the tree
    root=Node(int(ip[0]))                     
    size=0
    q=deque()
    
    # Push the root to the queue
    q.append(root)                            
    size=size+1 
    
    # Starting from the second element
    i=1                                       
    while(size>0 and i<len(ip)):
        # Get and remove the front of the queue
        currNode=q[0]
        q.popleft()
        size=size-1
        
        # Get the current node's value from the string
        currVal=ip[i]
        
        # If the left child is not null
        if(currVal!="N"):
            
            # Create the left child for the current node
            currNode.left=Node(int(currVal))
            
            # Push it to the queue
            q.append(currNode.left)
            size=size+1
        # For the right child
        i=i+1
        if(i>=len(ip)):
            break
        currVal=ip[i]
        
        # If the right child is not null
        if(currVal!="N"):
            
            # Create the right child for the current node
            currNode.right=Node(int(currVal))
            
            # Push it to the queue
            q.append(currNode.right)
            size=size+1
        i=i+1
    return root

if __name__=="__main__":
    t=int(input())
    for _ in range(t):
        line=input()
        target=int(input())
        root=buildTree(line)
        print(Solution().minTime(root,target))

# } Driver Code Ends
