class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        l=0
        r=len(nums)-1
        while(l<=r):
            m=l+(r-l)//2
            if((m-1<0 or nums[m-1]!=nums[m]) and (m+1==len(nums) or nums[m]!=nums[m+1])):
                return nums[m]
            leftsize=m-1 if (nums[m]==nums[m-1]) else m
            if(leftsize%2==0):
                l=m+1
            else:
                r=m-1

the idea here is simple since every element exists in pair except one we reduce our search space to the space having odd no of elements
