class Solution:
    def minDays(self, bloomDay: List[int], m: int, k: int) -> int:
        l=1
        ans=-1
        r=max(bloomDay)
        while(l<=r):
            mid=l+(r-l)//2
            c=0
            ck=0
            for i in bloomDay:
                if i<=mid:
                    ck+=1
                else:
                    ck=0
                if(ck==k):
                    c+=1
                    ck=0
            print(mid,c,l,r)
            if(c>=m):
                ans=mid
                r=mid-1
            else:
                l=mid+1
        return ans


The question was phrased like find the minimum no of days required to make m boqueue with k adjacent floors.

SO the answer is simple we need to perform binary search on the answer
