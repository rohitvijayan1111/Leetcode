class UnionFind:
    def __init__(self,size):
        self.parent=list(range(size))
        self.rank=[1]*size
    
    def find(self,x):
        if(self.parent[x]!=x):
            self.parent[x]=self.find(self.parent[x])
        return self.parent[x]
    
    def union(self,x,y):
        rootx=self.find(x)
        rooty=self.find(y)
        if rootx!=rooty:
            if(self.rank[rootx]>self.rank[rooty]):
                self.parent[rooty]=rootx
            elif(self.rank[rooty]>self.rank[rootx]):
                self.parent[rootx]=rooty
            else:
                self.parent[rooty]=rootx
                self.rank[rootx]+=1
    def count(self):
        return sum(self.find(x)==x for x in range(len(self.parent)))
class Solution:
    def regionsBySlashes(self, grid: List[str]) -> int:
        n=len(grid)
        uf=UnionFind(n*n*4)
        for i in range(n):
            for j in range(n):
                index=4*(i*n+j)
                c=grid[i][j]

                if(c=="/"):
                    uf.union(index+0,index+1)
                    uf.union(index+2,index+3)
                
                elif(c=="\\"):
                    uf.union(index+1,index+3)
                    uf.union(index+0,index+2)
                else:
                    uf.union(index+0,index+1)
                    uf.union(index+1,index+2)
                    uf.union(index+2,index+3)
                
                if(i+1<n):
                    uf.union(index+3,index+4*n)
                if(j+1<n):
                    uf.union(index+2,index+4+1)

        return uf.count()
                
