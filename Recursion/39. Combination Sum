Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.

The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the 
frequency
 of at least one of the chosen numbers is different.

The test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.

 

Example 1:

Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.


class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        l=[]
        def helper(m,s,c,flag):
            if(s==target):
                l.append(m)
                return
            elif(s>target):
                return
            if(c>=len(candidates)):
                return
            helper(m+[candidates[c]],s+candidates[c],c,False)
            if(flag):
                c=c+1
            helper(m,s,c+1,flag)
        helper([],0,0,False)
        return l


The concept is very simple it is similary to finding the subsets with sum k which has repeatitive no but here repeation is not 
present so what we do is we dont increase the counter if we chose to include it  so that we can get repetitve value

The mistake i made was i called three recursion including current ,including next and not including current

including next is not needed at all as in the next recursion that would be handled.





EASIER SOL:
class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        res=[]
        def helper(arr,c,total):
            if(total==target):
                res.append(arr.copy())
                return
            if(total>target or c>=len(candidates)):
                return
            arr.append(candidates[c])
            helper(arr,c,total+candidates[c])
            arr.pop()
            helper(arr,c+1,total)
        helper([],0,0)
        return res
