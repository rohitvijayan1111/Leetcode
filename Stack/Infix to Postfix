#User function Template for python3


class Solution:
    
    #Function to convert an infix expression to a postfix expression.
    def InfixtoPostfix(self, exp):
        #code here
        priority={
            "^":5,
            "*":4,
            "/":4,
            "+":3,
            "-":3,
        }
        s=[]
        f=1
        res=""
        for i in exp:
            if(i not in priority and i not in "()"):
                res+=i
            else:
                if(i==")"):
                    while(s and s[-1]!="("):
                        res+=s.pop()
                    s.pop()
                elif(i=="("):
                    f=0
                    s.append(i)
                elif(s and s[-1]!="(" and priority[i]<=priority[s[-1]]):
                    while(s and s[-1]!="(" and priority[i]<=priority[s[-1]]):
                        res+=s.pop()
                    s.append(i)
                else:
                    s.append(i)
            #print(i,res,s)
        while(s):
            res+=s.pop()
        return res
#{ 
 # Driver Code Starts
#Initial Template for Python 3

import atexit
import io
import sys

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)


_INPUT_LINES = sys.stdin.read().splitlines()
input = iter(_INPUT_LINES).__next__
_OUTPUT_BUFFER = io.StringIO()
sys.stdout = _OUTPUT_BUFFER

@atexit.register

def write():
    sys.__stdout__.write(_OUTPUT_BUFFER.getvalue())


if __name__ == '__main__':
    test_cases = int(input())
    for cases in range(test_cases) :
        exp = str(input())
        ob=Solution()
        print(ob.InfixtoPostfix(exp))
# } Driver Code Ends
