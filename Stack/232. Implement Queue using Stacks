
class Stack:
    """
    An implementation of a stack following LIFO (Last in first out) order.

    === Attributes ===
    items: list - the items in a stack, where the front of the list is the bottom of the
                  stack
    """
    items: list

    def __init__(self) -> None:
        """
        Initiate a empty stack
        """
        self.items = []

    def pop(self) -> Any:
        """
        remove the top element of the stack and return it
        """
        return self.items.pop()

    def push(self, x: Any) -> None:
        """
        Push the item onto the top of the stack
        """
        self.items.append(x)

    def is_empty(self):
        return len(self.items) == 0

    def peek(self):
        return self.items[-1]

class MyQueue:

    def __init__(self):
        self.s=Stack()
        self.temp=Stack()

    def push(self, x: int) -> None:
        while(not self.s.is_empty()):
            self.temp.push(self.s.pop())
        self.s.push(x)
        while(not self.temp.is_empty()):
            self.s.push(self.temp.pop())

    def pop(self) -> int:
        return self.s.pop()
    def peek(self) -> int:
        return self.s.peek()
        

    def empty(self) -> bool:
        return self.s.is_empty()      


# Your MyQueue object will be instantiated and called as such:
# obj = MyQueue()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.peek()
# param_4 = obj.empty()
