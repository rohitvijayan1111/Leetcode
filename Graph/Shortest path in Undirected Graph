#User function Template for python3
from collections import deque
class Solution:
    def shortestPath(self, edges, n, m, src):
        # code her
        adj = {i: [] for i in range(n)}  # Ensure all nodes are present in the adjacency list
        for edge in edges:
            adj[edge[0]].append(edge[1])
            adj[edge[1]].append(edge[0])
    
    
        visited=[False for _ in range(n)]
        ans=[-1 for _ in range(n)]
        q=deque([(src,0)])
        ans[src] = 0
        while q:
            node,dist=q.popleft()
            if(visited[node]):
                continue
            visited[node]=True
            for i in adj[node]:
                if(not visited[i]):
                    if(ans[i]==-1 or ans[i]>dist+1):
                        ans[i]=dist+1
                    q.append((i,dist+1))
        return ans
                
            
#{ 
 # Driver Code Starts
#Initial Template for Python 3

if __name__ == '__main__':
    tc = int(input())
    while tc > 0:
        n, m = map(int, input().strip().split())
        edges=[]
        for i in range(m):
            li=list(map(int,input().split()))
            edges.append(li)
        src=int(input())
        ob = Solution()
        ans = ob.shortestPath(edges,n,m,src)
        for i in ans:
            print(i,end=" ")
        print()
        tc -= 1
# } Driver Code Ends
