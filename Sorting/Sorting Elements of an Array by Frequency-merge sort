#User function Template for python3
 
class Solution:
    def mergesort(self,arr,start,end,freq):
        if(start<end):
            mid=(start+end)//2
            self.mergesort(arr,start,mid,freq)
            self.mergesort(arr,mid+1,end,freq)
            self.merge(arr,start,mid,end,freq)
    def merge(self,arr,start,mid,end,freq):
        left=arr[start:mid+1]
        right=arr[mid+1:end+1]
        i=j=0
        k=start
        while(i<len(left) and j<len(right)):
            if(freq[left[i]]>freq[right[j]]):
                arr[k]=left[i]
                i+=1
            elif(freq[left[i]]<freq[right[j]]):
                arr[k]=right[j]
                j+=1
            else:
                if(left[i]>right[j]):
                    arr[k]=right[j]
                    j+=1
                else:
                    arr[k]=left[i]
                    i+=1
            k+=1
        while(i<len(left)):
            arr[k]=left[i]
            i+=1
            k+=1
        while(j<len(right)):
            arr[k]=right[j]
            j+=1
            k+=1
        
    #Function to sort the array according to frequency of elements.
    def sortByFreq(self,arr):
        #code here
        freq={}
        for i in arr:
            if i not in freq:
                freq[i]=1
            else:
                freq[i]+=1
        self.mergesort(arr,0,len(arr)-1,freq)
        return arr



#{ 
 # Driver Code Starts
#Initial Template for Python 3

import atexit
import io
import sys

_INPUT_LINES = sys.stdin.read().splitlines()
input = iter(_INPUT_LINES).__next__
_OUTPUT_BUFFER = io.StringIO()
sys.stdout = _OUTPUT_BUFFER


@atexit.register
def write():
    sys.__stdout__.write(_OUTPUT_BUFFER.getvalue())


if __name__ == '__main__':
    t = int(input())
    for tt in range(t):

        arr = list(map(int, input().strip().split()))
        l = Solution().sortByFreq(arr)
        print(*l)

# } Driver Code Ends
