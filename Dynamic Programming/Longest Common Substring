BOTTOM UP:
#User function Template for python3

class Solution:
    def longestCommonSubstr(self, str1, str2):
        n = len(str1)
        m = len(str2)
        
        # Initialize DP table with 0s
        dp = [[0] * (m + 1) for _ in range(n + 1)]
        max_len = 0
        
        for i in range(1, n + 1):
            for j in range(1, m + 1):
                if str1[i - 1] == str2[j - 1]:
                    dp[i][j] = dp[i - 1][j - 1] + 1
                    max_len = max(max_len, dp[i][j])
        
        return max_len
#{ 
 # Driver Code Starts
#Initial Template for Python 3

if __name__ == '__main__':
    t = int(input())
    for _ in range(t):
        S1 = input().strip()
        S2 = input().strip()
        ob = Solution()
        print(ob.longestCommonSubstr(S1, S2))

# } Driver Code Ends


TOP DOWN:

class Solution:
    def longestCommonSubstr(self, str1, str2):
        n = len(str1)
        m = len(str2)
        
        # Initialize the memoization table
        dp = [[-1 for _ in range(m + 1)] for _ in range(n + 1)]
        max_len = 0
        
        def helper(i, j, count):
            nonlocal max_len
            # Base case
            if i < 0 or j < 0:
                return count
            
            if dp[i][j] != -1:
                return dp[i][j]
            
            # If characters match
            if str1[i] == str2[j]:
                count = helper(i - 1, j - 1, count + 1)
                max_len = max(max_len, count)
            else:
                # Restart the count
                count = 0
            
            # Explore other possibilities by skipping one character from each string
            dp[i][j] = max(count, helper(i - 1, j, 0), helper(i, j - 1, 0))
            return dp[i][j]
        
        helper(n - 1, m - 1, 0)
        return max_len

# Driver code
if __name__ == '__main__':
    t = int(input())
    for _ in range(t):
        S1 = input().strip()
        S2 = input().strip()
        ob = Solution()
        print(ob.longestCommonSubstr(S1, S2))
